#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start cc2652-flasher-up
# ==============================================================================

set -e

declare autoflash_firmware
declare device
declare network_device
declare device_type
declare network_device_url
declare firmware
declare exit_status
declare cc2652p2_release_url
declare cc2652p7_release_url
declare ieee
declare write_ieee
declare bootloader_option
declare sonoff_prefix
declare ieee_option
declare ieee_log_suffix

# Current Z-Stack FW Release URL
# Repo Local due to https://github.com/Koenkk/Z-Stack-firmware/issues/512

cc2652p2_release_url="https://github.com/tube0013/tubeszb_addons/raw/main/tzb-cc2652-flasher/firmware/CC1352P2_CC2652P_launchpad_coordinator_20250321.zip"
cc2652p7_release_url="https://github.com/tube0013/tubeszb_addons/raw/main/tzb-cc2652-flasher/firmware/CC1352P7_coordinator_20250321.zip"

function cleanup() {
    exit_status=$?
    bashio::log.info "cc2652-flasher-up script exited with code ${exit_status}"
    echo "${exit_status}" > /run/s6-linux-init-container-results/exitcode

    /run/s6/basedir/bin/halt
}
trap cleanup EXIT

function exit_no_firmware {
    bashio::log.warning "No firmware found for the selected device, assuming firmware is installed."
    exit 0 
}

network_device=$(bashio::config 'network_device')
network_device_url=$(echo "$network_device" | sed 's/.\{5\}$//')
ieee=$(bashio::config 'ieee')

if bashio::config.true 'device_type'; then
    device=$(bashio::config 'device')
    bashio::log.info "Using USB Device " $(bashio::config 'device') 
else
    device="socket://${network_device}"
    bashio::log.info "Using Network Device " ${network_device}
fi

# Get Firmware

if bashio::config.true 'cc2652p2_fw'; then
    curl --silent -L -o "/root/firmware.zip" ${cc2652p2_release_url}
    bashio::log.info "Downloading " ${cc2652p2_release_url}
    if [ ! -f "/root/firmware.zip" ]; then
        bashio::log.warning "Downloading firmware failed"
        exit 0
    fi

    unzip -p "/root/firmware.zip" > "/root/firmware.hex"
    if [ ! -f "/root/firmware.hex" ]; then
        bashio::log.warning "Unzipping firmware failed"
        exit 0
    fi

    firmware="firmware.hex"

elif bashio::config.true 'sonoff'; then
    curl --silent -L -o "/root/firmware.zip" ${cc2652p2_release_url}
    bashio::log.info "Downloading " ${cc2652p2_release_url}
    if [ ! -f "/root/firmware.zip" ]; then
        bashio::log.warning "Downloading firmware failed"
        exit 0
    fi

    unzip -p "/root/firmware.zip" > "/root/firmware.hex"
    if [ ! -f "/root/firmware.hex" ]; then
        bashio::log.warning "Unzipping firmware failed"
        exit 0
    fi

    firmware="firmware.hex"


elif bashio::config.true 'cc2652p7_fw'; then
    curl --silent -L -o "/root/firmware.zip" ${cc2652p7_release_url}
    bashio::log.info "Downloading " ${cc2652p7_release_url}
    if [ ! -f "/root/firmware.zip" ]; then
        bashio::log.warning "Downloading firmware failed"
        exit 0
    fi

    unzip -p "/root/firmware.zip" > "/root/firmware.hex"
    if [ ! -f "/root/firmware.hex" ]; then
        bashio::log.warning "Unzipping firmware failed"
        exit 0
    fi

    firmware="firmware.hex"

elif bashio::config.has_value 'firmware_url'; then
    curl --silent -L -o "/root/firmware.zip" "$(bashio::config 'firmware_url')"
    bashio::log.info "Downloading " $(bashio::config 'firmware_url')
    if [ ! -f "/root/firmware.zip" ]; then
        bashio::log.warning "Firmware Download failed"
        exit 0
    fi

    unzip -p "/root/firmware.zip" > "/root/firmware.hex"
    if [ ! -f "/root/firmware.hex" ]; then
        bashio::log.warning "unzipping Download failed - Did you use the GitHub raw link?"
        exit 0
    fi

    firmware="firmware.hex"
else
    exit_no_firmware
fi

if bashio::config.true 'trigger_esphome_bsl'; then
    bashio::log.info "Triggering Bootloader mode on ${network_device_url}"
    curl --silent http://${network_device_url}/button/trigger_zigbee_module_bootloader/press
    curl --silent http://${network_device_url}/button/prep_the_cc2652p2_for_firmware_update/press
    sleep 8s
fi

#Determine if flashing a sonoff device and if true set the option
if bashio::config.true 'sonoff'; then
    bootloader_option="--bootloader-sonoff-usb"
    sonoff_prefix="Sonoff "
else
    bootloader_option=""
    sonoff_prefix=""
fi

#Determine if writing the ieee is enabled and if so store the option
if bashio::config.true 'write_ieee'; then
    ieee_option="--ieee-address ${ieee}"
    ieee_log_suffix=" and ieee-address ${ieee}"
else
    ieee_option=""
    ieee_log_suffix=""
fi

bashio::log.info "Starting CC2652P flasher with ${sonoff_prefix}${device}${ieee_log_suffix}"
cc1352-flasher.py -p "${device}" -evw ${bootloader_option} ${ieee_option} "/root/${firmware}"











#Old way


#if bashio::config.true 'sonoff'; then
#   
#    if bashio::config.true 'write_ieee'; then
#       bashio::log.info "Starting CC2652P flasher with Sonoff ${device} and ieee-address ${ieee}"
#       cc1352-flasher.py  -p ${device} -evw --bootloader-sonoff-usb --ieee-address ${ieee} "/root/${firmware}"
#    else
#       bashio::log.info "Starting CC2652P flasher with Sonoff ${device}"
#       cc1352-flasher.py -p ${device} -evw --bootloader-sonoff-usb "/root/${firmware}"
#    fi
#
#else
#   
#   if bashio::config.true 'write_ieee'; then
#      bashio::log.info "Starting cc2652P flasher with ${device} and ieee-address ${ieee}" 
#      cc1352-flasher.py  -p ${device} -evw  --ieee-address ${ieee} "/root/${firmware}"
#    else
#       bashio::log.info "Starting CC2652P flasher with ${device}"
#       cc1352-flasher.py -p ${device} -evw "/root/${firmware}"
#    fi
#fi

